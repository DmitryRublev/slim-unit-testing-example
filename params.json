{"name":"Slim Unit Testing Example","tagline":"Unit Testing SlimPHP - end-to-end testing of SlimPHP routes with PHPUnit. Examples of route testing and mocking with the SlimPHP dependency injection container.","body":"\r\nSlim Unit Testing Example\r\n================================================================================\r\n[![Build Status](https://travis-ci.org/there4/slim-unit-testing-example.png?branch=master)](https://travis-ci.org/there4/slim-unit-testing-example)\r\n\r\nSlimPHP is a great framework with a small footprint and everything you need to\r\nbuild fast applications. I've found it particularly well suited to delivering\r\ndata to [BackboneJS][bb] applications.\r\n\r\nHowever, I haven't found a great deal of information about integration and unit\r\ntesting with Slim, and have developed my own approach. I've refactored and\r\nintroduced it into this sample application. I hope it will help others on their\r\npath to using this great framework.\r\n\r\nThis application demonstrates complete end-to-end unit testing of a SlimPHP\r\napplication and its routes. With this approach, you'll be able to completely\r\nunit test your application without the need of Curl, webservers, or anything\r\nother than [PHPUnit][phpunit] installed on your system. This makes it easy to\r\ntest your entire app in an automated way with [TravisCI][tci]. Check out the\r\n[.travis.yml][yml] file in this project for an example of this.\r\n\r\n## Example\r\n\r\nHere's [a test][version_test] for a very simple endpoint that returns the version from the\r\napplication config. We're asseting that Slim responded with a `200` and that\r\nthe version matches what we expect.\r\n\r\n```php\r\n    class VersionTest extends Slim_Framework_TestCase {\r\n        public function testVersion() {\r\n            $this->get('/version');\r\n            $this->assertEquals(200, $this->response->status());\r\n            $this->assertEquals($this->app->config('version'), $this->response->body());\r\n        }\r\n    }\r\n```\r\n\r\n## Installation\r\n\r\nClone the repository and then run `composer install` and then `phpunit`. This\r\napplication assumes that you have `phpunit` installed globally on your system.\r\nThis application can be run as a functioning website. You can you use the sample\r\napache config file in the `build/` folder, or use the native php webserver. To\r\nuse the php webserver, run `php -S localhost:8080 -t public/` from the project\r\nroot and open your browser to [http://localhost:8080][lh]\r\n\r\n## Concepts\r\n\r\nThe `build/index.php` file serves as the application entry point. This file\r\ninitializes a SlimPHP `$app` with production configuration, includes the routes\r\nfile from `app/app.php` and then runs the app with `$app->run();`. This allows\r\nus to keep our application separate from the index, and gives us an opportunity\r\nto include our `app/app.php` file in a different context.\r\n\r\nWhen phpunit runs, it looks for the phpunit.xml file in our root. This file\r\nspecifies a testing bootstrap file. PHPUnit includes `testing/bootstrap.php`.\r\nThis file creates an `$app`, just like in `build/index.php`, but it uses\r\ntesting configuration. The bootstrap keeps a reference to `$app` for the testing\r\nframework, and then provides several helper methods for `GET`, `POST`, `PUT`,\r\n`PATCH`, `HEAD`, and `DELETE`.\r\n\r\nWith these methods, you can run end to end tests on SlimPHP routes without a\r\nwebserver. The tests run entirely within a mock enviroment, and will be fast and\r\nefficient. \r\n\r\n## Unit Testing vs. Integration Testing\r\n\r\nUnit tests should test an individual part of code. The system under test should\r\nbe as small as possible. You would unit test an individual method. Integration\r\ntesting exercises an entire system. Most of this example is about integration\r\ntesting. We are running tests that work Slim from initial instantiation to the\r\nfinal delivery of data. With integration tests, we're treating the entire\r\napplication as a unit, setting up a particular initial environment and then\r\nexecuting the `run()` command and finally inspecting the results to ensure that\r\nthey match our expectations.\r\n\r\n## Mocking with SlimPHP\r\n\r\nSee the [ZenTest][zen_test] for an example of mocking with SlimPHP dependency\r\ninjection. In this test we mock a Curl wrapper class from [Shuber][shuber]. This\r\nallows us to substitute responses and exercise the parts of our application that\r\nwe feel need testing. It also allows us to run these unit tests on systems that\r\ndon't have the curl extension installed. We're totally isolated from that\r\ndependency while this running test.\r\n\r\nThe [FileStoreTest][file_test] uses a mock for the authentication\r\nclass. Notice that the file store route doesn't use that class directly, but\r\ninstead it is used by the application authenticator method. We're using the app\r\ndependency injection container to swap out the real object for a mock version.\r\nThis approach allows us to control authentication results from within our test\r\nharness.\r\n\r\nYou can read more about dependency injection in the [SlimDocs on DI][di], and\r\nmore about mock objects in the [PHPUnit docs][php_mock].\r\n\r\n## Ideas and Extensions\r\n\r\nI've considered adding custom PHPUnit assertions that mirror the\r\n[Status Introspection][si] methods of SlimPHP. We could have tools like \r\n`$this->assertResponseOK();` or `$this->assertResponseBody('Some content');`.\r\nI'm not sure that I like these more than the current more verbose matchers, but\r\nit might be worth exploring.\r\n\r\nAt the moment, the helpers for `PUT`, `PATCH`, `HEAD`, and `DELETE` are\r\nuntested.\r\n\r\n## Contributing\r\n\r\nOpen an [issue][issues] for questions, comments, or suggestions. Pull requests\r\nare welcome, please format the code to PSR-2 standards and include an\r\nexplanation of the benefits.\r\n\r\n## Thanks\r\n\r\nThanks must be given to [Nicholas Humfrey][njh] for his work in this\r\n[integration testing harness][njh_test].\r\n\r\n[issues]: https://github.com/there4/slim-unit-testing-example/issues\r\n[phpunit]: http://phpunit.de/manual/current/en/index.html\r\n[yml]: https://github.com/there4/slim-unit-testing-example/blob/master/.travis.yml\r\n[tci]: http://travis-ci.org\r\n[php_mock]: http://phpunit.de/manual/3.0/en/mock-objects.html\r\n[shuber]: https://github.com/shuber/curl\r\n[si]: http://docs.slimframework.com/#Response\r\n[di]: http://docs.slimframework.com/#Dependency-Injection\r\n[file_test]: https://github.com/there4/slim-unit-testing-example/blob/master/tests/integration/FileStoreTest.php\r\n[zen_test]: https://github.com/there4/slim-unit-testing-example/blob/master/tests/integration/ZenTest.php\r\n[version_test]: https://github.com/there4/slim-unit-testing-example/blob/master/tests/integration/VersionTest.php\r\n[lh]: http://localhost:8080\r\n[bb]: http://backbonejs.org\r\n[njh]: https://github.com/njh\r\n[njh_test]: https://github.com/njh/njh.me/blob/master/test/IntegrationTest.php\r\n","google":"UA-8504376-1","note":"Don't delete this file! It's used internally to help with page regeneration."}